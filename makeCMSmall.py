

import sys
import h5py
import numpy as np
import pyqtgraph as pg
from PIL import Image
import matplotlib.pyplot as plt
def main(argv):


	dataFile = 'data/GreenlandInBedCoord_V2.h5'
	cmFile = 'data/CM900.h5'
	f = h5py.File(dataFile, 'r')
	
	
	
	keys = { "bed":[], "smb":[], "surface":[], "t2m":[], "thickness":[]}
	vx = f['VX'][:]
	vy = f['VY'][:]
	v = np.sqrt(vx**2 + vy**2)
	keys['velocity'] = v
	
	
	'''
	for key in keys:
		keys[key] = convertValueToCM(key, f[key][:])
	'''
	
	bed = convertValueToCM('bed', f['bed'][:])
	
	
	
	
	f.close()
	
	'''
	g = h5py.File(cmFile, 'w')
	g.close()
	'''


#generate color map taken from Patrick
	
def convertValueToCM(name, data):
    if name == 'velocity':
        c = [[255, 255, 255],  # zero is white
             [0, 76, 153],  # dark blue 1 - >10
             [0, 0, 200],
             [0, 255, 255],
             [0, 153, 76],
             [255, 255, 0],
             [200, 100, 0],
             [255, 0, 0],
             [153, 0, 0],
             [120, 0, 0]]
		
        logmax = np.log10(12950.7 - 0.01)
        div = logmax / (len(c) - 2)
        pos = [0,0.01]
        for i in range(1, len(c) - 2):
			pos.append(np.power(10, i * div))
        pos.append(8000)
        cm = pg.ColorMap(pos, c, mode='byte')
        return cm.mapToByte(data).astype(np.uint8)
		
    if name == 'bed':
        bedMin, bedMax = -5052.39510208, 3675.78314839
        lcArr = a = [[0,38,115],
		[0,38,115],
		[0,41,117],
		[0,41,117],
		[0,43,122],
		[0,43,122],
		[0,45,128],
		[0,45,128],
		[0,46,130],
		[0,46,130],
		[0,47,135],
		[0,47,135],
		[0,51,140],
		[0,51,140],
		[0,53,145],
		[0,53,145],
		[0,54,148],
		[0,54,148],
		[0,56,153],
		[0,56,153],
		[0,58,158],
		[0,58,158],
		[0,63,163],
		[0,63,163],
		[0,65,168],
		[0,65,168],
		[0,65,171],
		[0,65,171],
		[0,67,176],
		[0,67,176],
		[0,69,181],
		[0,69,181],
		[0,74,186],
		[0,74,186],
		[0,77,191],
		[0,77,191],
		[0,78,194],
		[0,78,194],
		[0,80,199],
		[0,80,199],
		[0,82,204],
		[0,82,204],
		[0,87,209],
		[0,87,209],
		[0,88,212],
		[0,88,212],
		[0,90,217],
		[0,90,217],
		[0,92,222],
		[0,92,222],
		[0,95,227],
		[0,95,227],
		[0,101,232],
		[0,101,232],
		[0,102,235],
		[0,102,235],
		[0,104,240],
		[0,104,240],
		[0,106,245],
		[0,106,245],
		[0,108,250],
		[0,108,250],
		[0,111,255],
		[0,111,255],
		[5,118,255],
		[5,118,255],
		[10,120,255],
		[10,120,255],
		[18,129,255],
		[18,129,255],
		[25,133,255],
		[25,133,255],
		[31,135,255],
		[31,135,255],
		[36,142,255],
		[36,142,255],
		[41,144,255],
		[41,144,255],
		[48,152,255],
		[48,152,255],
		[56,156,255],
		[56,156,255],
		[61,161,255],
		[61,161,255],
		[66,164,255],
		[66,164,255],
		[74,167,255],
		[74,167,255],
		[82,174,255],
		[82,174,255],
		[87,176,255],
		[87,176,255],
		[92,182,255],
		[92,182,255],
		[97,184,255],
		[97,184,255],
		[105,190,255],
		[105,190,255],
		[112,193,255],
		[112,193,255],
		[117,195,255],
		[117,195,255],
		[122,200,255],
		[122,200,255],
		[128,202,255],
		[128,202,255],
		[138,208,255],
		[138,208,255],
		[143,210,255],
		[143,210,255],
		[148,212,255],
		[148,212,255],
		[153,216,255],
		[153,216,255],
		[161,219,255],
		[161,219,255],
		[168,223,255],
		[168,223,255],
		[173,225,255],
		[173,225,255],
		[179,228,255],
		[179,228,255],
		[184,230,255],
		[184,230,255],
		[191,233,255],
		[191,233,255]]
        div = float(np.abs(bedMin)) / float(len(lcArr) - 1)
        linPos = []
        for i in range(len(lcArr)):
            linPos.append(bedMin + i * div)

        ######### ELEVATION COLORMAP
        lcArr1 = [
            [0, 153, 0],
            [102, 255, 102],
            [255, 255, 0],
            [255, 0, 0],
            [153, 0, 0],
            [255, 255, 255]
        ]
        linPos1 = [0, 3678/5, (2*3678)/5, (3*3678)/5,(4*3678)/5,(5*3678)/5]
        bedColor = lcArr + lcArr1
        bedPos = linPos + linPos1
        cm = pg.ColorMap(bedPos, bedColor, mode='byte')
        return cm.mapToByte(data).astype(np.uint8)
	
if __name__ == "__main__":
	main(sys.argv)